{
    "version": 3,
    "sources": [
        "main.js",
        "countries/russia.js"
    ],
    "names": [
        "toExport",
        "checkINN",
        "lengthList",
        "country",
        "includes",
        "value",
        "undefined",
        "arguments",
        "regexp",
        "COUNTRIES",
        "getRegexp",
        "length",
        "checkSum",
        "vat",
        "rules",
        "total",
        "charAt",
        "i",
        "multipliers",
        "m_1",
        "expect",
        "_check12DigitINN",
        "total1",
        "j",
        "m_2",
        "k",
        "total2",
        "m_3",
        "slice",
        "expect2",
        "this",
        "regex"
    ],
    "mappings": "qCAGIA,IAAAA,SAEIC,SAAMC,SAAuBC,GACzB,GAACD,GAAWE,UAASC,QAAzB,GAA+CC,SAAPC,UAAO,GAAP,SAAAA,UAAA,GAElCC,EAASC,EAAAN,GAAmBO,gBAC9B,KAACF,EAAYH,SAAQA,EAAOM,QAAA,MAAA,gBAE5B,IAACF,GAAUN,EAASS,GAASP,+BAGpCI,EAAAN,GAAAS,SAAAP,IAAA,0ECVG,QAAQM,GAAeE,EAAAC,UAGfC,IAAcC,KAAdD,EAAAA,OAAcC,sBAGVD,IAARF,EAAAG,OAAAC,GAAAH,EAAAI,YAAAC,IAAAF,EAGCF,IAAA,SAEDA,GAAA,wBAKG,OAAPA,KAAAK,EAGJ,OAASC,kBAIDR,GAAIF,GAAJ,KAGIW,IAAeN,KAAfM,EAAAA,OAAeN,sBAGnBM,IAAkBT,EAAlBG,OAAAO,GAAAT,EAAAI,YAAAM,IAAAD,EAGID,IAAkB,SAGjBA,GAAmBG,yBAIxBC,IAAkBb,EAAlBG,OAAAS,GAAAX,EAAAI,YAAAS,IAAAF,EAGCC,IAAA,SAEDA,GAAA,GAKH,IAAAN,GAAAE,KAAAT,EAAAe,MAAA,GAAA,yBAEM,OAAPR,IAAAS,EAGG,OAAA,EAGF,OACDf,MAAO,SAAAD,GACHK,MAAAA,GAAaL,EAAAiB,KAAAhB,QAAAO,EAAAR,EAAAiB,KAAAhB,QAETU,OACAG,aAJDR,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAMKK,KAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAD,EAAA,EAAA,EAAA,EAAA,GANJG,KAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IA9DfI,OAAA",
    "file": "inn.min.js",
    "sourcesContent": [
        "const COUNTRIES = {};\n\n// eslint-disable-next-line no-unused-vars\nvar toExport = {\n    checkINN:   (value, country = 'russia') => {\n        const lengthList = COUNTRIES[country].getValidLength();\n        if (!lengthList.includes(value.length)) return 'invalid length';\n\n        const regexp = COUNTRIES[country].getRegexp();\n        if (!regexp.test(value)) return 'don\\'t match regexp';\n\n        if (!COUNTRIES[country].checkSum(value)) return 'checksum didn\\'t match';\n\n        return true;\n    }\n};",
        "COUNTRIES.russia = (() => {\n    function _check10DigitINN (vat, rules) {\n        var total = 0;\n\n        if (vat.length === 10) {\n\n            for (var i = 0; i < 10; i++) {\n                total += +vat.charAt(i) * rules.multipliers.m_1[i];\n            }\n\n            total = total % 11;\n            if (total > 9) {\n                total = total % 10;\n            }\n\n            // Compare it with the last character of the VAT number. If it is the same, then it's valid\n            var expect = +vat.slice(9, 10);\n            return total === expect;\n        }\n\n        return false;\n    }\n\n    function _check12DigitINN (vat, rules) {\n        var total1 = 0;\n        var total2 = 0;\n\n        if (vat.length === 12) {\n\n            for (var j = 0; j < 11; j++) {\n                total1 += +vat.charAt(j) * rules.multipliers.m_2[j];\n            }\n\n            total1 = total1 % 11;\n\n            if (total1 > 9) {\n                total1 = total1 % 10;\n            }\n\n            for (var k = 0; k < 11; k++) {\n                total2 += +vat.charAt(k) * rules.multipliers.m_3[k];\n            }\n\n            total2 = total2 % 11;\n            if (total2 > 9) {\n                total2 = total2 % 10;\n            }\n\n            // Compare the first check with the 11th character and the second check with the 12th and last\n            // character of the VAT number. If they're both the same, then it's valid\n            var expect = (total1 === +vat.slice(10, 11));\n            var expect2 = (total2 === +vat.slice(11, 12));\n            return (expect) && (expect2);\n        }\n\n        return false;\n    }\n\n    return {\n        calcs: function (vat) {\n            return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules);\n        },\n        rules: {\n            multipliers: {\n                m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n                m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n                m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n            },\n            regex: [/^(RU)(\\d{10}|\\d{12})$/]\n        }\n    };\n})();"
    ],
    "sourceRoot": "/source/"
}