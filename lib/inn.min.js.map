{
    "version": 3,
    "sources": [
        "main.js",
        "countries/russia.js"
    ],
    "names": [
        "variations",
        "length",
        "rules",
        "arr",
        "push",
        "v",
        "_length",
        "some",
        "value",
        "country",
        "COUNTRIES",
        "checkVat",
        "MESSAGES",
        "VALID",
        "CHECKSUM_DONT_MATCH",
        "REGEX_DONT_MATCH",
        "checkVAT",
        "msg",
        "undefined",
        "arguments",
        "result",
        "getMsg",
        "globalControlNumber",
        "checkSum",
        "num",
        "controlSequence",
        "controlNumPosition",
        "controlNum",
        "valArr",
        "map",
        "numberArr",
        "reduce",
        "p",
        "slice",
        "sum",
        "k",
        "check10DigitVAT",
        "vat",
        "short",
        "check12DigitVAT",
        "sequences",
        "ctrlNumPos",
        "isFirstNumValid",
        "isSecondNumValid",
        "long"
    ],
    "mappings": "qCAKIA,SAAAA,GAAmBC,EAAAC,GAAA,GAAAF,GAAcE,OAAMF,KAAAA,EAANA,YAAjCG,IAGH,8BADUA,MAAAA,GAASC,KAAAF,EAAAF,WAAAK,GAAAC,WACnBH,EAAAI,KAAA,SAAAF,kBAYG,QAAKH,GAAAM,EAAiBA,EAAQC,wCAKjCC,EAAAD,GAAAE,SAAAH,GAEDI,EAAAC,MAFCD,EAAAE,wDAtBG,GAAMd,MAUNc,GACAD,eAAO,iBAJXE,iBAAA,6DAOAF,MAAA,YAaQG,SAAMd,SAAkBO,GAClBQ,GAAAA,GAAaT,UAAON,QAAd,GAAZgB,SAAAC,UAAA,GAAA,SAAAA,UAAA,GAEOjB,EAAEkB,EAAgBR,GAASC,MACrCI,EAAAI,EAAAb,EAAAN,EAAAO,sDC9BGa,GAAAA,OAAAA,WAsB4C,QAA5CC,GAAAC,EAAAC,EAAAC,GACMC,GAAAA,GAAaC,EAAAA,WAAOF,MAAAA,IAAPG,IAAnB,SAAAxB,GACMyB,OAAYF,IACQD,EAAcF,EAAAA,GAAoBM,EAAQC,EAADC,MAAA,EAAAP,GAAAQ,EAAUF,EAAVH,IAAA,SAAAxB,EAAA8B,GAAnE,MAAA9B,GAAAoB,EAAAU,0BAEQD,MAAMhC,GAAMoB,GAGxB,OAASc,GAAAA,EAAiBC,sBAAKV,EAG3B,QAAOJ,GAAce,2BAGzB,OAASC,GAATF,EAAAC,EAA+BE,UAAA,GAAAF,EAAAhC,QAAAgC,EAAAG,WAAA,IAG3B,QAAMC,GAAkBnB,2BAGjBmB,EAAmBC,EAAAA,EAAAA,EAA1BH,UAAA,GAAAI,EAAAtC,QAAAsC,EAAAH,WAAA,IACHE,EAAApB,EAAAc,EAAAO,EAAAJ,UAAA,GAAAI,EAAAtC,QAAAsC,EAAAH,WAAA,GAEM,OAAAC,IAAAC,EA3CH3C,GAAAA,IACIsC,oBAAO,GACHhC,OAAAA,qBACAkC,YAGAC,OANInC,QAAA,GAQFkC,YAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACFlC,aADE,IAMFmC,MANEnC,QAAA,GAREkC,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAHhBC,aAAA,GAAA,KAiDQ,QACHvC,MAAAA,EAJLS,SAAA,SAAA0B,GAhDJ,MAAAD,GAAAC,IAAAE,EAAAF",
    "file": "inn.min.js",
    "sourcesContent": [
        "const COUNTRIES = {};\n\nfunction checkLength (length, rules) {\n    const variations = Object.keys(rules.variations);\n    const arr = [];\n    variations.forEach(v => arr.push(rules.variations[v]._length));\n\n    return arr.some(v => v === length);\n}\n\nconst MESSAGES = {\n    INVALID_LENGTH: 'INVALID_LENGTH',\n    REGEX_DONT_MATCH: 'REXEX_DONT_MATCH',\n    CHECKSUM_DONT_MATCH: 'CHECKSUM_DONT_MATCH',\n    VALID: 'VALID'\n};\n\nfunction getMsg (value, rules, country) {\n    if (!checkLength(value.length, rules)) return MESSAGES.INVALID_LENGTH;\n\n    if (!rules.regex.test(value)) return MESSAGES.REGEX_DONT_MATCH;\n\n    if (!COUNTRIES[country].checkVat(value)) return MESSAGES.CHECKSUM_DONT_MATCH;\n\n    return MESSAGES.VALID;\n}\n\n// eslint-disable-next-line no-unused-vars\nvar toExport = {\n    checkVAT: (value, country = 'russia') => {\n        const rules = COUNTRIES[country].rules;\n        const msg = getMsg(value, rules, country);\n\n        return { result: msg === MESSAGES.VALID, msg, country };\n    }\n};",
        "// eslint-disable-next-line no-undef\nCOUNTRIES.russia = (() => {\n\n    const rules = {\n        globalControlNumber: 11,\n        regex: [/^(\\d{10}|\\d{12})$/],\n        variations: {\n            short: {\n                _length: 10,\n                sequences: [\n                    [2, 4, 10, 3, 5, 9, 4, 6, 8]\n                ],\n                ctrlNumPos: [-1]\n            },\n            long: {\n                _length: 12,\n                sequences: [\n                    [7, 2, 4, 10, 3, 5, 9, 4, 6, 8],\n                    [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]\n                ],\n                ctrlNumPos: [-2, -1]\n            }\n        }\n    };\n\n    function checkSum (num, controlSequence, controlNumPosition) {\n        const valArr = num.toString().split('').map(v => +v);\n        const controlNum = valArr[controlNumPosition];\n        const numberArr = valArr.slice(0, controlNumPosition);\n        const sum = numberArr.map((v, k) => v * controlSequence[k]).reduce((p, c) => p + c);\n\n        return (sum % rules.globalControlNumber) === controlNum;\n    }\n\n    function check10DigitVAT (vat) {\n        // vat = 7830002293;\n        const short = rules.variations.short;\n        return checkSum(vat, short.sequences[0], short._length + short.ctrlNumPos[0]);\n    }\n\n    function check12DigitVAT (vat) {\n        //val = 500100732259;\n        const long = rules.variations.long;\n        const isFirstNumValid = checkSum(vat, long.sequences[0], long._length + long.ctrlNumPos[0]);\n        const isSecondNumValid = checkSum(vat, long.sequences[1], long._length + long.ctrlNumPos[1]);\n\n        return isFirstNumValid && isSecondNumValid;\n    }\n\n    return {\n        rules: rules,\n        checkVat (vat) {\n            return check10DigitVAT(vat) || check12DigitVAT(vat);\n        }\n    };\n})();"
    ],
    "sourceRoot": "/source/"
}