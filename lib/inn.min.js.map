{
    "version": 3,
    "sources": [
        "countries/russia.js"
    ],
    "names": [
        "_check10DigitINN",
        "vat",
        "rules",
        "total",
        "length",
        "i",
        "charAt",
        "multipliers",
        "m_1",
        "expect",
        "slice",
        "_check12DigitINN",
        "total1",
        "total2",
        "j",
        "m_2",
        "k",
        "m_3",
        "expect2",
        "calcs",
        "this",
        "regex"
    ],
    "mappings": "YAAA,SAASA,kBAAkBC,EAAKC,GAC5B,GAAIC,GAAQ,CAEZ,IAAmB,KAAfF,EAAIG,OAAe,CAEnB,IAAK,GAAIC,GAAI,EAAGA,EAAI,GAAIA,IACpBF,IAAUF,EAAIK,OAAOD,GAAKH,EAAMK,YAAYC,IAAIH,EAGpDF,IAAgB,GACZA,EAAQ,IACRA,GAAgB,GAIpB,IAAIM,IAAUR,EAAIS,MAAM,EAAG,GAC3B,OAAOP,KAAUM,EAGrB,OAAO,EAGX,QAASE,kBAAkBV,EAAKC,GAC5B,GAAIU,GAAS,EACTC,EAAS,CAEb,IAAmB,KAAfZ,EAAIG,OAAe,CAEnB,IAAK,GAAIU,GAAI,EAAGA,EAAI,GAAIA,IACpBF,IAAWX,EAAIK,OAAOQ,GAAKZ,EAAMK,YAAYQ,IAAID,EAGrDF,IAAkB,GAEdA,EAAS,IACTA,GAAkB,GAGtB,KAAK,GAAII,GAAI,EAAGA,EAAI,GAAIA,IACpBH,IAAWZ,EAAIK,OAAOU,GAAKd,EAAMK,YAAYU,IAAID,EAGrDH,IAAkB,GACdA,EAAS,IACTA,GAAkB,GAKtB,IAAIJ,GAAUG,KAAYX,EAAIS,MAAM,GAAI,IACpCQ,EAAWL,KAAYZ,EAAIS,MAAM,GAAI,GACzC,OAAQD,IAAYS,EAGxB,OAAO,0EAIPC,MAAO,SAAUlB,GACb,MAAOD,kBAAiBC,EAAKmB,KAAKlB,QAAUS,iBAAiBV,EAAKmB,KAAKlB,QAE3EA,OACIK,aACIC,KAAM,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClCO,KAAM,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACrCE,KAAM,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE5CI,OAAQ",
    "file": "inn.min.js",
    "sourcesContent": [
        "function _check10DigitINN (vat, rules) {\n    var total = 0;\n\n    if (vat.length === 10) {\n\n        for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * rules.multipliers.m_1[i];\n        }\n\n        total = total % 11;\n        if (total > 9) {\n            total = total % 10;\n        }\n\n        // Compare it with the last character of the VAT number. If it is the same, then it's valid\n        var expect = +vat.slice(9, 10);\n        return total === expect;\n    }\n\n    return false;\n}\n\nfunction _check12DigitINN (vat, rules) {\n    var total1 = 0;\n    var total2 = 0;\n\n    if (vat.length === 12) {\n\n        for (var j = 0; j < 11; j++) {\n            total1 += +vat.charAt(j) * rules.multipliers.m_2[j];\n        }\n\n        total1 = total1 % 11;\n\n        if (total1 > 9) {\n            total1 = total1 % 10;\n        }\n\n        for (var k = 0; k < 11; k++) {\n            total2 += +vat.charAt(k) * rules.multipliers.m_3[k];\n        }\n\n        total2 = total2 % 11;\n        if (total2 > 9) {\n            total2 = total2 % 10;\n        }\n\n        // Compare the first check with the 11th character and the second check with the 12th and last\n        // character of the VAT number. If they're both the same, then it's valid\n        var expect = (total1 === +vat.slice(10, 11));\n        var expect2 = (total2 === +vat.slice(11, 12));\n        return (expect) && (expect2);\n    }\n\n    return false;\n}\n\nexport default {\n    calcs: function (vat) {\n        return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules);\n    },\n    rules: {\n        multipliers: {\n            m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n            m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n            m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n        },\n        regex: [/^(RU)(\\d{10}|\\d{12})$/]\n    }\n};"
    ],
    "sourceRoot": "/source/"
}